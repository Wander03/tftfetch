% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_match_data_by_id.R
\name{get_match_data_by_id}
\alias{get_match_data_by_id}
\title{Fetch TFT Match Data by Match ID}
\usage{
get_match_data_by_id(matchId, routing_region, api_key, raw = FALSE)
}
\arguments{
\item{matchId}{A character string representing the unique identifier of the TFT match.}

\item{routing_region}{A character string representing the player's region (americas, asia, europe).}

\item{api_key}{A character string containing your valid Riot API key.}

\item{raw}{A logical value. If \code{TRUE}, the function returns the raw, nested JSON list.
If \code{FALSE} (the default), it returns a list of normalized data frames.}
}
\value{
If \code{raw = FALSE}: A named list of four data frames (\code{matches}, \code{participants}, \code{traits}, \code{units}).
If \code{raw = TRUE}: A nested list containing the full data for the specified match.
}
\description{
Retrieves a single, full Teamfight Tactics (TFT) match's detailed data
using its unique match ID. This function returns a list of normalized
data frames by default, or the raw JSON list if requested.
}
\details{
This function interacts with the \verb{https://\{routing_region\}.api.riotgames.com/tft/match/v1/matches/\{matchId\}}
endpoint.

The \code{matchId} is a unique identifier for a specific TFT match. This ID is
typically obtained by first calling the \code{get_match_ids_by_puuid()} function.

The \code{routing_region} parameter (e.g., "americas", "asia", "europe") determines
which API cluster the request is sent to. For Account-V1 endpoints, the account
data is globally accessible. This means you can query any PUUID through any
of these regional routing values, and you will receive the same result.
It is recommended to use the regional routing value closest to your service's
physical location to minimize latency.
}
\examples{
\dontrun{
# Replace with your actual API key and a valid match ID
api_key <- "YOUR_API_KEY"
example_matchId <- "YOUR_MATCH_ID" # Obtained from get_match_ids_by_puuid()

# Get the full match data as normalized data frames
match_data_clean <- get_match_data_by_id(
  matchId = example_matchId,
  routing_region = "americas",
  api_key = api_key
)

# View the separate data frames
print(match_data_clean$matches)
print(match_data_clean$participants)

# Get the raw JSON response
match_data_raw <- get_match_data_by_id(
  matchId = example_matchId,
  routing_region = "americas",
  api_key = api_key,
  raw = TRUE
)
print(names(match_data_raw))
}

}
